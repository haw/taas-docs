{"version":3,"sources":["App.tsx","reportWebVitals.ts","components/BlockChainInfo.tsx","index.tsx"],"names":["App","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","useStyles","makeStyles","theme","createStyles","root","flexGrow","paper","padding","spacing","palette","text","primary","heading","marginLeft","operational","backgroundColor","success","main","down","error","dark","toolbar","mixins","client","JSONRPCClient","jsonRPCRequest","fetch","method","headers","body","JSON","stringify","response","status","json","jsonRPCResponse","receive","undefined","id","Promise","reject","Error","statusText","BlockChainInfo","classes","useState","isLive","setIsLive","setBlockChainInfo","listwallets","setListWallets","useEffect","request","result","console","log","reason","Container","className","Grid","container","item","xs","Paper","elevation","direction","statusBar","Accordion","onChange","e","expanded","sort","filter","Boolean","AccordionSummary","expandIcon","AccordionDetails","List","map","ListItem","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.90eb4673.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport ExploreIcon from '@material-ui/icons/Explore';\n\nfunction App() {\n  return (\n  <AppBar position=\"sticky\">\n    <Toolbar>\n      <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n        <ExploreIcon />\n      </IconButton>\n      <Typography variant=\"h6\">\n        TaaS Playground Status Dashboard\n      </Typography>\n    </Toolbar>\n  </AppBar>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useEffect, useState } from 'react';\nimport { JSONRPCClient } from 'json-rpc-2.0';\n\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\n\n/* Icons */\nimport ErrorIcon from '@material-ui/icons/Error';\nimport AccountBalanceWalletIcon from '@material-ui/icons/AccountBalanceWallet';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\n\n\ninterface BlockChainInfo {\n  chain :string,\n  mode :string,\n  block :number,\n  headers :number,\n  bestbockhash :string,\n  verificationprogress :number,\n  initialblockdownload :boolean,\n  size_on_disk :number,\n  pruned :boolean,\n  aggregatePubkeys :[],\n  warnings :string,\n}\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      color: theme.palette.text.primary,\n    },\n    heading: {\n      marginLeft: theme.spacing(1),\n    },\n    operational: {\n      backgroundColor: theme.palette.success.main,\n      color: \"white\",\n    },\n    down: {\n      backgroundColor: theme.palette.error.dark,\n      color: \"white\",\n    },\n    toolbar: theme.mixins.toolbar,\n  }),\n);\n\nconst BlockChainInfo  = () => {\n  const classes = useStyles();\n  const [isLive, setIsLive] = useState<boolean>(false);\n  const [blockchaininfo, setBlockChainInfo] = useState<BlockChainInfo>();\n  const [listwallets, setListWallets] = useState([]);\n\n\n\n  useEffect(() => {\n      client.request(\"getblockchaininfo\")\n      .then(\n        (result) => {\n         setIsLive(true);\n         setBlockChainInfo(result)\n         console.log(result);\n        } ,\n        reason => {\n          setIsLive(false); console.log(\"ERROR!!!\")\n        });\n\n  }, []);\n\n  function handleWalletListChange(e :object, expanded: boolean) {\n    if (expanded) {\n      client.request(\"listwallets\")\n      .then(\n        (result) => {\n          setListWallets(result.sort().filter(Boolean));\n        }\n      );\n    }\n  }\n\n  function statusBar(isLive: boolean) {\n\n    var text: string = \"\";\n\n    if (isLive) {\n      text = \"Everything is operatonal\"\n    } else {\n      text = \"Something is going wrong\";\n    }\n\n      return (\n        <Paper\n         elevation={1}\n         className={classes.paper + ' ' + (isLive ? classes.operational : classes.down )}\n        >\n          <Grid container direction=\"row\">\n          <Grid item>\n            { isLive ? <CheckCircleIcon /> : <ErrorIcon />}\n          </Grid>\n          <Grid item>\n            <Typography\n             variant=\"button\"\n             className={classes.heading}\n            >\n              {text}\n            </Typography>\n          </Grid>\n        </Grid>\n      </Paper>\n      );\n  }\n\n  return (\n    <Container>\n      <div className={classes.toolbar} />\n      <div className={classes.root}>\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            {statusBar(isLive)}\n          </Grid>\n\n          <Grid item xs={12}>\n            <Accordion\n              onChange={handleWalletListChange}\n            >\n              <AccordionSummary\n                expandIcon={<ExpandMoreIcon />}\n              >\n                 <AccountBalanceWalletIcon />\n                 <Typography className={classes.heading} variant=\"button\">\n                  Wallets\n                 </Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <List>\n                  {listwallets.map((e) => <ListItem><Typography variant=\"body1\">{e}</Typography></ListItem>)}\n                </List>\n              </AccordionDetails>\n\n            </Accordion>\n          </Grid>\n\n        </Grid>\n      </div>\n    </Container>\n  );\n}\n\nconst client: JSONRPCClient = new JSONRPCClient((jsonRPCRequest) =>\n  fetch(\"https://playground.taas.haw.biz:2820/\", {\n    method: \"POST\",\n    headers: {\n      \"content-type\": \"application/json\",\n      \"authorization\": \"Basic dGFweXJ1czp0YXB5cnVz\"\n    },\n    body: JSON.stringify(jsonRPCRequest),\n  }).then((response) => {\n    if (response.status === 200) {\n      return response\n        .json()\n        .then((jsonRPCResponse) => client.receive(jsonRPCResponse));\n    } else if (jsonRPCRequest.id !== undefined) {\n      return Promise.reject(new Error(response.statusText));\n    }\n  })\n);\n\nexport default BlockChainInfo;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport BlockChainInfo from \"./components/BlockChainInfo\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <BlockChainInfo />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}